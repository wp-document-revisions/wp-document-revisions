{"version":3,"file":"wp-document-revisions.js","mappings":"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","sources":["webpack://wp-document-revisions/./src/admin/wp-document-revisions.ts"],"sourcesContent":["/**\n * WordPress Document Revisions - Main Admin Class\n * Modern TypeScript conversion of the original CoffeeScript\n */\nimport '../types/globals';\nexport class WPDocumentRevisions {\n    constructor($) {\n        this.hasUpload = false;\n        this.$ = $;\n        this.secure = window.location.protocol === 'https:';\n        this.window = window.dialogArguments || window.opener || window.parent || window.top;\n        this.initializeEvents();\n        this.initializeUI();\n        this.hijackAutosave();\n        // Set up periodic updates\n        setInterval(() => this.updateTimestamps(), 60000); // Update timestamps every minute\n    }\n    /**\n     * Initialize event handlers\n     */\n    initializeEvents() {\n        const safeOn = (sel, evt, handler) => {\n            const el = this.$(sel);\n            if (el && typeof el.on === 'function') {\n                el.on(evt, handler);\n            }\n        };\n        safeOn('.revision', 'click', this.restoreRevision.bind(this));\n        safeOn('#override_link', 'click', this.overrideLock.bind(this));\n        safeOn('#document a', 'click', this.requestPermission.bind(this));\n        // Document lifecycle events (guarded for sparse mocks in tests)\n        safeOn(document, 'autosaveComplete', this.postAutosaveCallback.bind(this));\n        safeOn(document, 'documentUpload', this.legacyPostDocumentUpload.bind(this));\n        // Form controls\n        safeOn('#misc-publishing-actions a', 'click', this.enableSubmit.bind(this));\n        safeOn('input, select', 'change', this.enableSubmit.bind(this));\n        safeOn('input[type=text], textarea', 'keyup', this.enableSubmit.bind(this));\n        // Media handling\n        safeOn('#content-add_media', 'click', this.cookieFalse.bind(this));\n        safeOn('#postimagediv .inside', 'click', this.cookieTrue.bind(this));\n        safeOn('#submitdiv .inside', 'click', this.cookieDelete.bind(this));\n        safeOn('#adminmenumain', 'click', this.cookieDelete.bind(this));\n        safeOn('#wpadminbar', 'click', this.cookieDelete.bind(this));\n    }\n    /**\n     * Initialize UI elements\n     */\n    initializeUI() {\n        // Disable submit buttons initially (guard if prop not available in test mocks)\n        const $buttons = this.$(':button, :submit', '#submitpost');\n        if ($buttons && typeof $buttons.prop === 'function') {\n            $buttons.prop('disabled', true);\n        }\n        // Show/hide relevant sections\n        const safeShow = (sel) => {\n            const el = this.$(sel);\n            if (el && typeof el.show === 'function') {\n                el.show();\n            }\n        };\n        const safeHide = (sel) => {\n            const el = this.$(sel);\n            if (el && typeof el.hide === 'function') {\n                el.hide();\n            }\n        };\n        safeShow('#document');\n        safeShow('#revision-log');\n        safeHide('#revision-summary');\n        this.bindPostDocumentUploadCallback();\n    }\n    /**\n     * Monkey patch global autosave to serve as a lock mechanism\n     */\n    hijackAutosave() {\n        if (typeof window.autosave === 'function') {\n            const originalAutosaveEnableButtons = window.autosave_enable_buttons;\n            if (originalAutosaveEnableButtons) {\n                window.autosave_enable_buttons = () => {\n                    this.$(document).trigger('autosaveComplete');\n                    if (this.hasUpload) {\n                        originalAutosaveEnableButtons();\n                    }\n                };\n            }\n        }\n    }\n    /**\n     * Enable submit buttons and show revision summary\n     */\n    enableSubmit() {\n        this.$('#revision-summary').show();\n        this.$(':button, :submit', '#submitpost').removeAttr('disabled');\n    }\n    /**\n     * Restore revision with confirmation\n     * @param e\n     */\n    restoreRevision(e) {\n        e.preventDefault();\n        const href = this.$(e.target).attr('href');\n        if (href && confirm(window.wp_document_revisions.restoreConfirmation)) {\n            window.location.href = href;\n        }\n    }\n    /**\n     * Override document lock\n     */\n    overrideLock() {\n        this.$.post(window.ajaxurl, {\n            action: 'override_lock',\n            post_id: this.$('#post_ID').val() || 0,\n            nonce: window.wp_document_revisions.nonce,\n        })\n            .done((data) => {\n            if (data) {\n                this.$('#lock_override').hide();\n                this.$('.error').not('#lock-notice').hide();\n                this.$('#publish, .add_media, #lock-notice').fadeIn();\n                if (typeof window.autosave === 'function') {\n                    window.autosave();\n                }\n            }\n            else {\n                alert(window.wp_document_revisions.lockError);\n            }\n        })\n            .fail(() => {\n            alert(window.wp_document_revisions.lockError);\n        });\n    }\n    /**\n     * Request notification permission for HTML5 notifications\n     */\n    requestPermission() {\n        if ('Notification' in window) {\n            Notification.requestPermission();\n        }\n    }\n    /**\n     * Show lock override notice using HTML5 notifications or alert\n     * @param notice\n     */\n    lockOverrideNotice(notice) {\n        if ('Notification' in window) {\n            if (Notification.permission === 'default') {\n                Notification.requestPermission().then((permission) => {\n                    if (permission === 'granted') {\n                        this.lockOverrideNotice(notice);\n                    }\n                    else {\n                        alert(notice);\n                    }\n                });\n            }\n            else if (Notification.permission === 'granted') {\n                new Notification(window.wp_document_revisions.lostLockNoticeTitle, {\n                    body: notice,\n                    icon: window.wp_document_revisions.lostLockNoticeLogo,\n                });\n            }\n            else {\n                alert(notice);\n            }\n        }\n        else {\n            alert(notice);\n        }\n    }\n    /**\n     * Handle post-autosave callback to check for lock conflicts\n     */\n    postAutosaveCallback() {\n        // Check for autosave alert and lock notice\n        if (this.$('#autosave-alert').length > 0 &&\n            this.$('#lock-notice').length > 0 &&\n            this.$('#lock-notice').is(':visible')) {\n            const title = this.$('#title').val() || '';\n            const notice = window.wp_document_revisions.lostLockNotice.replace('%s', title);\n            this.lockOverrideNotice(notice);\n            // Reload page to lock out user and prevent duplicate alerts\n            location.reload();\n        }\n    }\n    /**\n     * Legacy post document upload handler\n     */\n    legacyPostDocumentUpload() {\n        // Legacy support - implementation would depend on specific requirements\n        console.warn('Legacy post document upload event triggered');\n    }\n    /**\n     * Set cookie indicating document context (not image)\n     */\n    cookieFalse() {\n        window.wpCookies.set('doc_image', 'false', 24 * 60 * 60, false, false, this.secure, 'strict');\n    }\n    /**\n     * Set cookie indicating image context\n     */\n    cookieTrue() {\n        window.wpCookies.set('doc_image', 'true', 24 * 60 * 60, false, false, this.secure, 'strict');\n        this.$(':button, :submit', '#submitpost').removeAttr('disabled');\n    }\n    /**\n     * Delete document/image context cookie\n     */\n    cookieDelete() {\n        window.wpCookies.set('doc_image', 'true', -1, false, false, this.secure, 'strict');\n        this.$(':button, :submit', '#submitpost').removeAttr('disabled');\n    }\n    /**\n     * Update all timestamp displays with human-readable time differences\n     */\n    updateTimestamps() {\n        this.$('.timestamp').each((index, element) => {\n            const $element = this.$(element);\n            const timestamp = $element.attr('id');\n            if (timestamp) {\n                $element.text(this.humanTimeDiff(timestamp));\n            }\n        });\n    }\n    /**\n     * Calculate human-readable time difference\n     * @param timestamp\n     */\n    humanTimeDiff(timestamp) {\n        const now = new Date().getTime();\n        const then = new Date(timestamp).getTime();\n        const diff = Math.abs(now - then) / 1000; // difference in seconds\n        const intervals = [\n            { label: 'year', seconds: 31536000 },\n            { label: 'month', seconds: 2592000 },\n            { label: 'week', seconds: 604800 },\n            { label: 'day', seconds: 86400 },\n            { label: 'hour', seconds: 3600 },\n            { label: 'minute', seconds: 60 },\n        ];\n        for (const interval of intervals) {\n            const count = Math.floor(diff / interval.seconds);\n            if (count >= 1) {\n                return `${count} ${interval.label}${count !== 1 ? 's' : ''} ago`;\n            }\n        }\n        return 'just now';\n    }\n    /**\n     * Bind post document upload callback for plupload\n     */\n    bindPostDocumentUploadCallback() {\n        if (!window.uploader) {\n            return; // Prevent errors pre-3.3\n        }\n        window.uploader.bind('FileUploaded', (uploader, file, response) => {\n            if (response.response.match('media-upload-error')) {\n                return; // Exit on error\n            }\n            this.postDocumentUpload(file.name, response.response);\n        });\n    }\n    /**\n     * Handle document upload completion\n     * @param fileName\n     * @param attachmentID\n     */\n    postDocumentUpload(fileName, attachmentID) {\n        // 3.3+ verify upload was successful\n        if (typeof attachmentID === 'string' && attachmentID.indexOf('error') !== -1) {\n            this.$('.media-item:first').html(attachmentID);\n            return;\n        }\n        // Convert file object to extension for backwards compatibility\n        // (Legacy) Extension extraction previously populated a now-removed instance\n        // property. We intentionally keep the logic (as a no-op) to document parity\n        // with historical behavior and to simplify future diffs if resurrected.\n        if (typeof fileName === 'object' && fileName.name) {\n            // (Legacy no-op) fileName.name.split('.').pop();\n        }\n        else if (typeof fileName === 'string') {\n            // (Legacy no-op) fileName.split('.').pop();\n        }\n        if (this.hasUpload) {\n            return; // Prevent firing more than once\n        }\n        // Update content field with attachment ID\n        jQuery('#content').val(attachmentID);\n        // Hide update messages and show revision summary\n        jQuery('#message').hide();\n        jQuery('#revision-summary').show();\n        // Re-enable submit button\n        jQuery(':button, :submit', '#submitpost').removeAttr('disabled');\n        this.hasUpload = true;\n        // Close thickbox\n        if (window.tb_remove) {\n            window.tb_remove();\n        }\n        // Handle entity conversion for older WordPress versions\n        let notice = window.wp_document_revisions.postUploadNotice;\n        if (typeof window.convertEntities === 'function') {\n            notice = window.convertEntities(notice);\n        }\n        // Show upload success notice with fade effect\n        jQuery('#post').before(notice).prev().fadeIn().fadeOut().fadeIn();\n        // Update permalink if it exists\n        const $permalink = jQuery('#sample-permalink');\n        if ($permalink.length > 0) {\n            const currentHtml = $permalink.html();\n            const updatedHtml = currentHtml.replace(/\\<\\/span>(\\.[A-Za-z0-9]{1,7})?$/i, window.wp_document_revisions.extension);\n            $permalink.html(updatedHtml);\n        }\n    }\n    /**\n     * Modern upload success callback (exposed for tests)\n     * @param uploader\n     * @param file\n     * @param response\n     */\n    onUploadSuccess(uploader, file, response) {\n        try {\n            const parsed = typeof response?.response === 'string' ? response.response : response;\n            this.postDocumentUpload(file, parsed);\n        }\n        catch (e) {\n            // Swallow in test context\n        }\n    }\n    /**\n     * Modern upload error callback (exposed for tests)\n     * @param _uploader\n     * @param _file\n     * @param response\n     */\n    onUploadError(_uploader, _file, response) {\n        const msg = typeof response === 'string' ? response : response?.response || 'Upload failed';\n        alert(msg);\n    }\n}\n// Initialize when document is ready\njQuery(document).ready(($) => {\n    // Note: selective enqueuing happens in includes/class-wp-document-revisions-admin.php\n    window.WPDocumentRevisions = new WPDocumentRevisions($);\n});\n"],"names":["WPDocumentRevisions","constructor","$","this","hasUpload","secure","window","location","protocol","dialogArguments","opener","parent","top","initializeEvents","initializeUI","hijackAutosave","setInterval","updateTimestamps","safeOn","sel","evt","handler","el","on","restoreRevision","bind","overrideLock","requestPermission","document","postAutosaveCallback","legacyPostDocumentUpload","enableSubmit","cookieFalse","cookieTrue","cookieDelete","$buttons","prop","safeShow","show","hide","safeHide","bindPostDocumentUploadCallback","autosave","originalAutosaveEnableButtons","autosave_enable_buttons","trigger","removeAttr","e","preventDefault","href","target","attr","confirm","wp_document_revisions","restoreConfirmation","post","ajaxurl","action","post_id","val","nonce","done","data","not","fadeIn","alert","lockError","fail","Notification","lockOverrideNotice","notice","permission","then","lostLockNoticeTitle","body","icon","lostLockNoticeLogo","length","is","title","lostLockNotice","replace","reload","console","warn","wpCookies","set","each","index","element","$element","timestamp","text","humanTimeDiff","now","Date","getTime","diff","Math","abs","intervals","label","seconds","interval","count","floor","uploader","file","response","match","postDocumentUpload","name","fileName","attachmentID","indexOf","html","jQuery","tb_remove","postUploadNotice","convertEntities","before","prev","fadeOut","$permalink","updatedHtml","extension","onUploadSuccess","parsed","onUploadError","_uploader","_file","ready"],"sourceRoot":""}